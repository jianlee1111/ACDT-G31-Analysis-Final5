# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ============================================
# ACDT G31 – GERD(2020) → GDP(2022/2023) Full Regressions
# ============================================
import streamlit as st
import pandas as pd
import numpy as np
import re
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf

st.set_page_config(page_title="ACDT G31 – GERD→GDP (Year-paired)", layout="wide")

DATA_FILE = "ACDT_final_dataset.csv"  # repo 파일명

# ----- 원문 지표명 (CSV 헤더와 정확히 일치해야 함) -----
GDP_NAME  = "Real GDP (billion USD, PPP-based, Chain-weighted, 2020 base year)"
GERD_NAME = "Gross Domestic Expenditure on R&D (GERD) (current PPP USD)"

MEDIATOR_NAMES = [
    "Resident Patent Applications",
    "Non-Resident Patent Applications",
    "R&D Researchers per Million People",
    "High-tech Export Share (% of Manufactured Exports)",
    "Business R&D Personnel (FTE)",
]
CONFOUNDER_NAMES = ["GDP per Capita", "Labor Force Size"]
MODERATOR_NAMES  = ["Government-financed BERD (%)", "Business-financed BERD (%)"]

X_YEAR = 2020
Y_YEARS = [2022, 2023]

# -----------------------------
# 유틸: CSV 로드 (0행=연도, 1행=지표명)
# -----------------------------
def read_as_multiindex(path: str) -> pd.DataFrame:
    # 인코딩 유연 처리
    last_err = None
    raw = None
    for enc in ("utf-8-sig", "cp949"):
        try:
            raw = pd.read_csv(path, header=None, encoding=enc, engine="python")
            break
        except Exception as e:
            last_err = e
    if raw is None:
        raise RuntimeError(f"CSV read failed: {last_err}")

    # “한 셀에 전부 들어간 CSV” 방지: 자동 split
    if raw.shape[1] == 1 and isinstance(raw.iloc[0,0], str):
        cell = raw.iloc[0,0]
        for sep in (",", "\t", ";"):
            if sep in cell:
                raw = raw[0].str.split(sep, expand=True)
                break

    years = raw.iloc[0].astype(str).values
    names = raw.iloc[1].astype(str).values
    df = raw.iloc[2:].copy()

    # MultiIndex 컬럼 구성
    df.columns = pd.MultiIndex.from_arrays([names, years], names=["Indicator", "Year"])

    # ---- 숫자 정제: 모든 열을 "Series"로 순회해 안전하게 처리 ----
    def clean_to_numeric(series: pd.Series) -> pd.Series:
        # 문자열화 후, 숫자/부호/지수표현만 남기고 나머지 제거
        s = series.astype(str)
        s = s.str.replace(",", "", regex=False)
        s = s.str.replace(r"[^0-9eE+\-\.]", "", regex=True)
        return pd.to_numeric(s, errors="coerce")

    # 모든 (Indicator, Year) 튜플에 대해 Series로 개별 처리
    for col in df.columns:
        df[col] = clean_to_numeric(df[col])

    # 연도 정수 캐스팅 (가능시)
    try:
        new_cols = []
        for (ind, yr) in df.columns:
            y = int(float(yr)) if str(yr).replace(".", "", 1).isdigit() else yr
            new_cols.append((ind, y))
        df.columns = pd.MultiIndex.from_tuples(new_cols, names=["Indicator", "Year"])
    except Exception:
        pass

    df.index = pd.RangeIndex(len(df))  # 국가명이 따로 없으면 단순 인덱스
    return df

def s_at(df_mi: pd.DataFrame, name: str, year) -> pd.Series:
    if (name in df_mi.columns.get_level_values(0)) and (year in df_mi.loc[:, name].columns):
        return df_mi.loc[:, (name, year)]
    return pd.Series([np.nan]*len(df_mi), index=df_mi.index)

def build_pair_dataset(df_mi: pd.DataFrame, x_year: int, y_year: int) -> pd.DataFrame:
    out = pd.DataFrame(index=df_mi.index)
    out["GERD"] = s_at(df_mi, GERD_NAME, x_year)
    out["GDP"]  = s_at(df_mi, GDP_NAME,  y_year)
    # Y-year 기준으로 보조변수들 결합
    for v in CONFOUNDER_NAMES + MEDIATOR_NAMES + MODERATOR_NAMES:
        out[v] = s_at(df_mi, v, y_year)
    # 로그
    out["ln_X"] = np.log(out["GERD"].replace({0: np.nan}))
    out["ln_Y"] = np.log(out["GDP"].replace({0: np.nan}))
    return out.dropna(subset=["ln_X","ln_Y"]).reset_index(drop=True)

def run_models(df_reg: pd.DataFrame):
    confs = [c for c in CONFOUNDER_NAMES if c in df_reg.columns]
    meds  = [m for m in MEDIATOR_NAMES if m in df_reg.columns]
    mods  = [m for m in MODERATOR_NAMES  if m in df_reg.columns]

    # M1
    m1 = smf.ols("ln_Y ~ ln_X", data=df_reg).fit()
    # M2
    rhs2 = "ln_X" + ((" + " + " + ".join([f'Q(\"{c}\")' for c in confs])) if confs else "")
    m2 = smf.ols(f"ln_Y ~ {rhs2}", data=df_reg).fit()
    # M3
    rhs3 = rhs2 + ((" + " + " + ".join([f'Q(\"{m}\")' for m in meds])) if meds else "")
    m3 = smf.ols(f"ln_Y ~ {rhs3}", data=df_reg).fit()
    # M4
    inter = " + ".join([f'ln_X * Q(\"{mo}\")' for mo in mods]) if mods else ""
    rhs4 = rhs3 if not inter else f"{rhs3} + {inter}"
    m4 = smf.ols(f"ln_Y ~ {rhs4}", data=df_reg).fit()

    def pick(model, key="ln_X"):
        return model.params.get(key, np.nan), model.pvalues.get(key, np.nan), model.rsquared_adj

    rows = []
    for label, model in [("M1: lnY~lnX", m1), ("M2:+conf", m2), ("M3:+med", m3), ("M4:+mods", m4)]:
        beta, pval, adjr2 = pick(model, "ln_X")
        rows.append([label, beta, pval, adjr2])
    summary = pd.DataFrame(rows, columns=["Model","β(ln_X)","p(ln_X)","Adj.R²"]).round(4)
    return {"M1":m1,"M2":m2,"M3":m3,"M4":m4}, summary

# ------------------ 앱 본문 ------------------
st.title("📈 GERD(2020) → GDP(2022/2023) – Full Regressions (Model 1–4)")

try:
    df_mi = read_as_multiindex(DATA_FILE)
except Exception as e:
    st.error(f"Error loading data: {e}")
    st.stop()

st.success("✅ Dataset loaded (Row0=Year, Row1=Indicator → MultiIndex)")

# (1) 전체 숫자열 분포 & 상관 히트맵 (Colab 스타일)
st.header("📊 Distributions & Correlations (All Numeric Columns)")
num_df = df_mi.copy()
num_df.columns = [f"{a} [{b}]" for a,b in num_df.columns]  # 보기 좋게
try:
    st.write(num_df.describe().T)
    fig_corr, ax_corr = plt.subplots(figsize=(12,7))
    sns.heatmap(num_df.corr(), cmap="coolwarm", center=0, ax=ax_corr)
    ax_corr.set_title("Correlation Heatmap")
    st.pyplot(fig_corr)
except Exception:
    st.info("Numerical summary skipped (insufficient numeric columns).")

# (2) 두 개의 고정 연도쌍 회귀
for yyr in Y_YEARS:
    st.markdown("---")
    st.header(f"🧮 Pair: GERD({X_YEAR}) → GDP({yyr})")

    df_reg = build_pair_dataset(df_mi, X_YEAR, yyr)
    if df_reg.empty:
        st.warning("No valid observations after cleaning for this pair.")
        continue

    st.subheader("📋 Regression dataset (preview)")
    st.dataframe(df_reg.head())

    # 산점도 (로그-로그)
    st.subheader("📉 ln(GERD) vs ln(GDP)")
    fig_sc, ax_sc = plt.subplots(figsize=(7,5))
    sns.regplot(x="ln_X", y="ln_Y", data=df_reg, scatter_kws={"alpha":0.6}, ax=ax_sc)
    ax_sc.set_xlabel(f"ln GERD ({X_YEAR})")
    ax_sc.set_ylabel(f"ln GDP ({yyr})")
    st.pyplot(fig_sc)

    # 모델 1~4
    models, table = run_models(df_reg)
    st.subheader("📘 Model Comparison")
    st.dataframe(table)

    # R² 막대
    fig_r2, ax_r2 = plt.subplots(figsize=(6,4))
    sns.barplot(x="Model", y="Adj.R²", data=table, ax=ax_r2)
    ax_r2.set_ylim(0, max(table["Adj.R²"]) * 1.1 if len(table) else 1)
    ax_r2.set_title("Adjusted R² across models")
    st.pyplot(fig_r2)

    # 전체 요약
    with st.expander("Full regression summaries"):
        for k, m in models.items():
            st.markdown(f"**{k}**")
            st.text(m.summary())

# (3) 해석 요약 (Colab 설명 톤)
st.markdown("""
### 🧩 Interpretation (Colab spec)
- **Model 1**은 GERD와 GDP 간의 기본 탄력성을 보여준다.
- **Model 2**는 교란변수(예: 1인당 GDP, 노동력 규모)를 통제하며, lnGERD 계수 변화로 **혼란효과 존재 여부**를 확인할 수 있다.
- **Model 3**는 특허·연구인력·하이테크수출·기업R&D인력 등 **매개** 경로를 포함하여, lnGERD 계수 감소(또는 유의성 변화)가 있으면 **간접효과**가 있음을 시사한다.
- **Model 4**는 정부/민간 **BERD 비중과의 상호작용**으로 **조절효과**를 검정한다(상호작용 항의 p < 0.05면 조절 유의).

> 모든 전처리·로그변환·연도쌍(2020→2022, 2020→2023) 회귀는 Colab 스펙을 그대로 따름.
""")