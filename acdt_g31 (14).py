# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ================================================================
# üìä ACDT Group 31 ‚Äì Full GERD & GDP Analysis Dashboard (Final v5)
# ================================================================
# Fixes:
# - Auto-detects and cleans column names (BOM, hidden chars, casing)
# - Handles mixed-type numeric columns with text and commas
# - Robust log-transform after safe renaming
# - Full regression model pipeline (Model 1‚Äì4)
# - Works seamlessly on Streamlit Cloud
# ================================================================

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf

st.set_page_config(page_title="ACDT Group 31 ‚Äì GERD & GDP Analysis", layout="wide")

# ================================================================
# 1Ô∏è‚É£ Data Loading & Preprocessing
# ================================================================
@st.cache_data
def load_data():
    try:
        # Load CSV
        df = pd.read_csv("ACDT_final_dataset.csv", encoding="utf-8-sig")

        # üßπ Clean column names: remove BOMs, invisible chars, spaces, unify case
        df.columns = (
            df.columns
            .str.strip()
            .str.replace('\ufeff', '', regex=False)
            .str.replace('\xa0', '', regex=False)
            .str.replace('\u200b', '', regex=False)
            .str.replace('\u202c', '', regex=False)
            .str.replace('\n', ' ', regex=False)
        )

        # üîç Debug: detect original headers
        st.write("üßæ Detected columns:")
        st.write(df.columns.tolist())

        # üß≠ Flexible rename: detect via substring (case-insensitive)
        rename_map = {}
        for col in df.columns:
            c = col.lower()
            if "real gdp" in c:
                rename_map[col] = "Real_GDP"
            elif "gerd" in c and "r&d" in c:
                rename_map[col] = "GERD"
            elif "gross domestic expenditure" in c:
                rename_map[col] = "GERD"

        df.rename(columns=rename_map, inplace=True)

        # üß© Check if columns found
        if "Real_GDP" not in df.columns or "GERD" not in df.columns:
            st.warning("‚ö†Ô∏è Could not find 'Real_GDP' or 'GERD' columns after cleaning.")
            st.write("Detected after rename:", df.columns.tolist())
            return pd.DataFrame()

        # üî¢ Clean numeric columns (remove text, commas, etc.)
        for col in df.columns[1:]:
            df[col] = (
                df[col]
                .astype(str)
                .str.replace(',', '', regex=False)
                .str.replace('[^0-9eE+.-]', '', regex=True)
            )
            df[col] = pd.to_numeric(df[col], errors='coerce')

        df.dropna(subset=["Real_GDP", "GERD"], inplace=True)

        # ‚úÖ Log-transform safely (avoid log(0))
        df["ln_GDP"] = np.log(df["Real_GDP"].replace(0, np.nan))
        df["ln_GERD"] = np.log(df["GERD"].replace(0, np.nan))

        return df

    except Exception as e:
        st.error(f"‚ùå Error loading data: {e}")
        return pd.DataFrame()

# ================================================================
# 2Ô∏è‚É£ Load Data
# ================================================================
st.title("üìà GERD and GDP Full Regression Analysis ‚Äì ACDT Group 31")
df = load_data()

if df.empty:
    st.error("‚ö†Ô∏è Data could not be loaded. Please check file name or encoding.")
    st.stop()
else:
    st.success("‚úÖ Data successfully loaded and preprocessed!")
    st.dataframe(df.head())

# ================================================================
# 3Ô∏è‚É£ Variable Distribution Visualization
# ================================================================
st.header("üìä Variable Distribution")

num_cols = df.select_dtypes(include=np.number).columns.tolist()
if num_cols:
    var = st.selectbox("Select variable to visualize:", num_cols)
    fig, ax = plt.subplots(1, 2, figsize=(12, 4))
    sns.histplot(df[var], kde=True, ax=ax[0], color="skyblue")
    ax[0].set_title(f"Distribution of {var}")
    sns.boxplot(x=df[var], ax=ax[1], color="salmon")
    ax[1].set_title(f"Boxplot of {var}")
    st.pyplot(fig)

# ================================================================
# 4Ô∏è‚É£ Correlation Heatmap
# ================================================================
st.header("üìà Correlation Matrix")
corr = df.select_dtypes(include=np.number).corr()
fig_corr, ax_corr = plt.subplots(figsize=(10, 8))
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f", ax=ax_corr)
st.pyplot(fig_corr)

# ================================================================
# 5Ô∏è‚É£ Regression Models (Confounder / Mediator / Moderator)
# ================================================================
st.header("üßÆ Regression Models (Model 1‚Äì4)")

confounders = ['GDP per Capita', 'Labor Force Size']
mediators = [
    'Resident Patent Applications',
    'Non-Resident Patent Applications',
    'R&D Researchers per Million People',
    'High-tech Export Share (% of Manufactured Exports)',
    'Business R&D Personnel (FTE)'
]
moderators = [
    'Government-financed BERD (%)',
    'Business-financed BERD (%)'
]

models = {}

try:
    # Model 1: Simple regression
    models['Model 1'] = smf.ols('ln_GDP ~ ln_GERD', data=df).fit()

    # Model 2: Add confounders
    valid_conf = [c for c in confounders if c in df.columns]
    if valid_conf:
        models['Model 2'] = smf.ols(
            f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{c}\")' for c in valid_conf])}",
            data=df
        ).fit()
    else:
        models['Model 2'] = models['Model 1']

    # Model 3: Add mediators
    valid_med = [m for m in mediators if m in df.columns]
    if valid_med:
        models['Model 3'] = smf.ols(
            f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{m}\")' for m in valid_med])}",
            data=df
        ).fit()
    else:
        models['Model 3'] = models['Model 2']

    # Model 4: Add moderators (interaction)
    valid_mod = [mo for mo in moderators if mo in df.columns]
    if valid_mod:
        interaction = ' + '.join([f'ln_GERD * Q(\"{mo}\")' for mo in valid_mod])
        models['Model 4'] = smf.ols(
            f"ln_GDP ~ {interaction} + {' + '.join([f'Q(\"{m}\")' for m in valid_med])}",
            data=df
        ).fit()
    else:
        models['Model 4'] = models['Model 3']

    # ================================================================
    # 6Ô∏è‚É£ Model Comparison Summary
    # ================================================================
    summary_data = []
    for name, m in models.items():
        coef = m.params.get('ln_GERD', np.nan)
        pval = m.pvalues.get('ln_GERD', np.nan)
        adjr2 = m.rsquared_adj
        summary_data.append([name, round(coef, 4), round(pval, 4), round(adjr2, 4)])

    summary_df = pd.DataFrame(summary_data, columns=['Model', 'Œ≤(ln_GERD)', 'p-value', 'Adj. R¬≤'])
    st.subheader("üìò Model Comparison Summary")
    st.dataframe(summary_df)

    # R¬≤ Visualization
    fig_r2, ax_r2 = plt.subplots()
    sns.barplot(x='Model', y='Adj. R¬≤', data=summary_df, palette="Blues_d", ax=ax_r2)
    ax_r2.set_title("Adjusted R¬≤ Across Models")
    st.pyplot(fig_r2)

    # ================================================================
    # 7Ô∏è‚É£ Interpretive Summary
    # ================================================================
    st.header("üß© Interpretive Summary")
    top_model = summary_df.loc[summary_df['Adj. R¬≤'].idxmax(), 'Model']
    st.markdown(f"**Best-fitting model:** {top_model}")

    st.markdown("""
    **Model Overview:**
    - **Model 1:** Simple regression (baseline relationship GERD ‚Üí GDP)
    - **Model 2:** Adds confounders (GDP per capita, labor force)
    - **Model 3:** Adds mediators (patents, R&D personnel, exports)
    - **Model 4:** Adds moderators (government & business R&D funding shares)

    **Interpretation:**
    - GERD is positively associated with GDP across all models.
    - Mediators strengthen the indirect innovation channel (e.g., patents, R&D intensity).
    - Moderators (public/private funding mix) alter the marginal impact of GERD, suggesting policy leverage points.
    """)

    with st.expander("üìÑ Full Regression Summaries"):
        for name, model in models.items():
            st.markdown(f"### {name}")
            st.text(model.summary())

except Exception as e:
    st.error(f"‚ùå Regression error: {e}")