# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ================================
# GERD ↔ GDP Full Dashboard (final)
# ================================
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf

st.set_page_config(page_title="GERD & GDP – ACDT Group 31", layout="wide")

DATA_FILE = "ACDT_final_dataset.csv"   # <= 레포에 올린 파일명 그대로

# ---------- 1) 로딩 + 전처리 ----------
@st.cache_data
def load_data(path: str) -> pd.DataFrame:
    # 1) 인코딩/구분자 유연 로딩
    df_raw = None
    last_err = None
    for enc in ("utf-8-sig", "cp949"):
        try:
            # header=None: 0행=연도, 1행=지표명
            df_raw = pd.read_csv(path, header=None, encoding=enc, engine="python")
            break
        except Exception as e:
            last_err = e
            continue
    if df_raw is None:
        raise RuntimeError(f"CSV read failed: {last_err}")

    # 2) 혹시 열이 1개로 붙어있으면(‘한 셀 CSV’) 구분자 추정
    if df_raw.shape[1] == 1:
        cell = df_raw.iloc[0, 0]
        if isinstance(cell, str):
            for sep in (",", "\t", ";"):
                if sep in cell:
                    df_raw = df_raw[0].str.split(sep, expand=True)
                    break

    # 3) 1행(두 번째 줄)을 ‘무조건’ Series로 만들어 컬럼명으로 사용
    header_candidate = df_raw.iloc[1]
    if not isinstance(header_candidate, pd.Series):
        header_candidate = pd.Series(list(header_candidate))

    header = header_candidate.astype(str).values
    df = df_raw.iloc[2:].copy()
    df.columns = header

    # 4) 숫자화: 각 "열(Series)"에만 .str 적용 (DataFrame 전체에 .str 금지!)
    def to_numeric_series(s: pd.Series) -> pd.Series:
        s = s.astype(str)
        # 쉼표 제거 -> 숫자/지수기호/부호/점만 유지
        s = s.str.replace(",", "", regex=False)
        s = s.str.replace(r"[^0-9eE+\-\.]", "", regex=True)
        return pd.to_numeric(s, errors="coerce")

    for c in df.columns:
        df[c] = to_numeric_series(df[c])

    # 5) 핵심 변수 리네임 (파일의 원래 지표명 → 분석용 표준명)
    rename_map = {
        "Real GDP (billion USD, PPP-based, Chain-weighted, 2020 base year)": "Real_GDP",
        "Gross Domestic Expenditure on R&D (GERD) (current PPP USD)": "GERD",
        # (필요시 여기에 다른 지표명도 추가)
    }
    df.rename(columns=rename_map, inplace=True)

    # 6) 필수 컬럼 체크
    if "Real_GDP" not in df.columns or "GERD" not in df.columns:
        # 디버깅을 위해 어떤 컬럼이 있는지 보여줌
        raise KeyError(
            "Missing 'Real_GDP' or 'GERD' columns after cleaning. "
            f"Current columns: {list(df.columns)[:15]} ..."
        )

    # 7) 로그변환 (0/음수 보호)
    df["ln_GDP"] = np.log(df["Real_GDP"].replace({0: np.nan}))
    df["ln_GERD"] = np.log(df["GERD"].replace({0: np.nan}))

    return df.dropna(subset=["ln_GDP", "ln_GERD"])

# ---------- UI ----------
st.title("📈 GERD and GDP Full Regression Dashboard – ACDT Group 31")

try:
    df = load_data(DATA_FILE)
except Exception as e:
    st.error(f"Error loading data: {e}")
    st.stop()

st.success("✅ Data successfully loaded and cleaned.")
st.dataframe(df.head())

# ---------- 변수 분포 ----------
st.header("📊 Variable Distribution")
num_cols = df.select_dtypes(include=np.number).columns.tolist()
if num_cols:
    var = st.selectbox("Select a variable", num_cols, index=num_cols.index("ln_GERD") if "ln_GERD" in num_cols else 0)
    fig, ax = plt.subplots(1, 2, figsize=(12, 4))
    sns.histplot(df[var], kde=True, ax=ax[0])
    ax[0].set_title(f"Histogram: {var}")
    sns.boxplot(x=df[var], ax=ax[1])
    ax[1].set_title(f"Boxplot: {var}")
    st.pyplot(fig)

# ---------- 상관행렬 ----------
st.header("📈 Correlation Matrix")
corr = df.select_dtypes(include=np.number).corr()
fig_corr, ax_corr = plt.subplots(figsize=(10, 7))
sns.heatmap(corr, annot=True, fmt=".2f", cmap="coolwarm", ax=ax_corr)
st.pyplot(fig_corr)

# ---------- 회귀 (Model 1–4) ----------
st.header("🧮 Regression Models (Model 1–4)")

# 데이터셋 컬럼명(중재·매개·교란)은 너희가 쓰던 이름 그대로 유지
confounders = ["GDP per Capita", "Labor Force Size"]
mediators = [
    "Resident Patent Applications",
    "Non-Resident Patent Applications",
    "R&D Researchers per Million People",
    "High-tech Export Share (% of Manufactured Exports)",
    "Business R&D Personnel (FTE)",
]
moderators = ["Government-financed BERD (%)", "Business-financed BERD (%)"]

models = {}

try:
    # Model 1: 단순 (탄력성)
    models["Model 1"] = smf.ols("ln_GDP ~ ln_GERD", data=df).fit()

    # Model 2: 교란 통제
    valid_conf = [c for c in confounders if c in df.columns]
    if valid_conf:
        models["Model 2"] = smf.ols(
            f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{c}\")' for c in valid_conf])}", data=df
        ).fit()
    else:
        models["Model 2"] = models["Model 1"]

    # Model 3: 매개 변수 포함
    valid_med = [m for m in mediators if m in df.columns]
    if valid_med:
        models["Model 3"] = smf.ols(
            f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{m}\")' for m in valid_med])}", data=df
        ).fit()
    else:
        models["Model 3"] = models["Model 2"]

    # Model 4: 조절(상호작용) + 매개
    valid_mod = [mo for mo in moderators if mo in df.columns]
    if valid_mod:
        inter = " + ".join([f'ln_GERD * Q(\"{mo}\")' for mo in valid_mod])
        base = " + ".join([f'Q(\"{m}\")' for m in valid_med]) if valid_med else ""
        rhs = inter if not base else f"{inter} + {base}"
        models["Model 4"] = smf.ols(f"ln_GDP ~ {rhs}", data=df).fit()
    else:
        models["Model 4"] = models["Model 3"]

    # 요약 테이블
    rows = []
    for name, m in models.items():
        rows.append(
            [name, m.params.get("ln_GERD", np.nan), m.pvalues.get("ln_GERD", np.nan), m.rsquared_adj]
        )
    sum_df = pd.DataFrame(rows, columns=["Model", "β(ln_GERD)", "p-value", "Adj. R²"])
    st.subheader("📘 Model Comparison")
    st.dataframe(sum_df.round(4))

    # R² 막대그래프
    fig_r2, ax_r2 = plt.subplots(figsize=(7, 4))
    sns.barplot(x="Model", y="Adj. R²", data=sum_df, ax=ax_r2)
    ax_r2.set_ylim(0, max(sum_df["Adj. R²"]) * 1.1)
    st.pyplot(fig_r2)

    # 산점도 (ln_GERD vs ln_GDP)
    st.subheader("Scatter: ln(GERD) vs ln(GDP)")
    fig_sc, ax_sc = plt.subplots(figsize=(7, 5))
    sns.regplot(x="ln_GERD", y="ln_GDP", data=df, ax=ax_sc, scatter_kws={"alpha": 0.6})
    st.pyplot(fig_sc)

    # 최종 모델 잔차 히스토그램
    st.subheader("Residuals (Final Model)")
    final = models.get("Model 4", list(models.values())[-1])
    fig_res, ax_res = plt.subplots(figsize=(7, 4))
    sns.histplot(final.resid, kde=True, ax=ax_res)
    st.pyplot(fig_res)

except Exception as e:
    st.error(f"Regression error: {e}")

# ---------- 해석 요약 ----------
st.header("🧩 Interpretation (quick)")
st.markdown("""
- **Model 1**: ln(GERD) ↗ → ln(GDP) ↗ (탄력성 추정).
- **Model 2**: 교란(예: 1인당 GDP, 노동규모)을 통제해도 ln(GERD) 효과가 유지되는지 확인.
- **Model 3**: 특허·연구인력·하이테크 수출·기업 R&D 인력 등 **매개**로 경로 일부 설명되는지 확인.
- **Model 4**: 정부/민간 BERD 비중이 **조절**(상호작용)하며 ln(GERD)→ln(GDP) 효과 크기를 바꾸는지 확인.
""")