# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ================================================================
# üìä ACDT Group 31 ‚Äì Full Regression Analysis Streamlit App
# ================================================================
# Includes:
#  - Data cleaning & preprocessing
#  - Variable distributions
#  - Correlation (GERD vs GDP)
#  - Model 1‚Äì4 Regression (simple, confounder, mediator, moderator)
#  - Visualizations & summaries
# ================================================================

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf

st.set_page_config(page_title="ACDT Group 31 Analysis", layout="wide")

# ================================================================
# 1Ô∏è‚É£ Data Loading & Preprocessing
# ================================================================
@st.cache_data
def load_and_preprocess_data():
    try:
        df = pd.read_csv("ACDT_final_dataset.csv", encoding="utf-8-sig")

        # Drop first two header rows
        df = df.iloc[2:].copy()

        # Clean numeric columns
        for col in df.columns[1:]:
            df[col] = (
                df[col]
                .astype(str)
                .str.replace('[^0-9.-]', '', regex=True)
            )
            df[col] = pd.to_numeric(df[col], errors="coerce")

        df.dropna(inplace=True)

        # Log-transform GDP and GERD (Colab style)
        if 'Real GDP' in df.columns and 'Gross Domestic Expenditure on R&D (GERD) (current PPP USD)' in df.columns:
            df['Log_Real_GDP'] = np.log(df['Real GDP'] + 1e-9)
            df['Log_GERD'] = np.log(df['Gross Domestic Expenditure on R&D (GERD) (current PPP USD)'] + 1e-9)

        return df

    except Exception as e:
        st.error(f"‚ùå Error loading data: {e}")
        return pd.DataFrame()

# ================================================================
# 2Ô∏è‚É£ Load Data
# ================================================================
df = load_and_preprocess_data()

st.title("üìà GERD and GDP Full Regression Analysis")
if df.empty:
    st.error("Data could not be loaded. Please check file path.")
    st.stop()
else:
    st.success("‚úÖ Dataset successfully loaded and preprocessed!")

# ================================================================
# 3Ô∏è‚É£ Variable Distributions
# ================================================================
st.header("üìä Variable Distributions")

num_cols = df.select_dtypes(include=np.number).columns
selected_var = st.selectbox("Select variable to view its distribution", num_cols)

fig, ax = plt.subplots(1, 2, figsize=(12, 4))
sns.histplot(df[selected_var], kde=True, ax=ax[0])
ax[0].set_title(f"Distribution of {selected_var}")
sns.boxplot(df[selected_var], ax=ax[1])
ax[1].set_title(f"Boxplot of {selected_var}")
st.pyplot(fig)

# ================================================================
# 4Ô∏è‚É£ Correlation: GERD vs GDP
# ================================================================
st.header("üìà Correlation: GERD vs GDP")

if 'Log_Real_GDP' in df.columns and 'Log_GERD' in df.columns:
    corr_val = df['Log_Real_GDP'].corr(df['Log_GERD'])
    st.markdown(f"**Correlation (Log_GERD vs Log_Real_GDP):** {corr_val:.3f}")

    fig2, ax2 = plt.subplots()
    sns.regplot(x='Log_GERD', y='Log_Real_GDP', data=df, ax=ax2)
    st.pyplot(fig2)

# ================================================================
# 5Ô∏è‚É£ Correlation Heatmap
# ================================================================
st.header("üå°Ô∏è Correlation Heatmap (All Numeric Variables)")
corr = df[num_cols].corr()
fig3, ax3 = plt.subplots(figsize=(12, 8))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", ax=ax3)
st.pyplot(fig3)

# ================================================================
# 6Ô∏è‚É£ Multiple Regression Models (Model 1‚Äì4)
# ================================================================
st.header("üßÆ Multiple Linear Regression Models (Model 1‚Äì4)")

# Prepare formula components
confounder = 'GDP per Capita' if 'GDP per Capita' in df.columns else None
mediators = [
    col for col in df.columns if any(x in col for x in [
        'Patent', 'Researcher', 'Export', 'Personnel'
    ])
]
moderator = 'Government-financed BERD (%)' if 'Government-financed BERD (%)' in df.columns else None

models = {}

try:
    # Model 1
    models['Model 1'] = smf.ols('Log_Real_GDP ~ Log_GERD', data=df).fit()

    # Model 2 (confounder)
    if confounder:
        models['Model 2'] = smf.ols(f'Log_Real_GDP ~ Log_GERD + Q("{confounder}")', data=df).fit()
    else:
        models['Model 2'] = models['Model 1']

    # Model 3 (mediators)
    if mediators:
        models['Model 3'] = smf.ols(f'Log_Real_GDP ~ Log_GERD + {" + ".join([f"Q('{m}')" for m in mediators])}', data=df).fit()
    else:
        models['Model 3'] = models['Model 2']

    # Model 4 (moderator interaction)
    if moderator:
        models['Model 4'] = smf.ols(f'Log_Real_GDP ~ Log_GERD * Q("{moderator}") + {" + ".join([f"Q('{m}')" for m in mediators])}', data=df).fit()
    else:
        models['Model 4'] = models['Model 3']

    # ================================================================
    # 7Ô∏è‚É£ Model Summaries and Comparison Table
    # ================================================================
    st.subheader("üìò Model Comparison Summary")

    summary_data = []
    for name, m in models.items():
        coef = m.params.get('Log_GERD', np.nan)
        pval = m.pvalues.get('Log_GERD', np.nan)
        adjr2 = m.rsquared_adj
        summary_data.append([name, round(coef, 4), round(pval, 4), round(adjr2, 4)])

    summary_df = pd.DataFrame(summary_data, columns=['Model', 'Œ≤(Log_GERD)', 'p-value', 'Adj. R¬≤'])
    st.dataframe(summary_df)

    # Plot R¬≤ comparison
    fig4, ax4 = plt.subplots()
    sns.barplot(x='Model', y='Adj. R¬≤', data=summary_df, ax=ax4)
    ax4.set_title("Adjusted R¬≤ Across Models")
    st.pyplot(fig4)

    # Display full regression summary (expandable)
    with st.expander("üìë Detailed Regression Summaries"):
        for name, model in models.items():
            st.markdown(f"### {name}")
            st.text(model.summary())

except Exception as e:
    st.error(f"Regression failed: {e}")