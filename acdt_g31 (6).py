# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ================================================================
# üìä ACDT Group 31 Final Streamlit App (Fixed Filename Version)
# ================================================================
# - Loads dataset directly from repository (no upload required)
# - Cleans and preprocesses data
# - Performs regression analysis and visualizations
# ================================================================

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf
from scipy import stats

# ================================================================
# 1Ô∏è‚É£ Data Loading & Preprocessing
# ================================================================

@st.cache_data
def load_and_preprocess_data():
    """
    Loads the CSV dataset and preprocesses it.
    - Removes non-numeric characters
    - Converts to numeric where possible
    - Drops invalid rows
    """
    try:
        # ‚úÖ Load the dataset (rename to simpler file name if possible)
        df = pd.read_csv("ACDT final data set22.xlsx - Îç∞Ïù¥ÌÑ∞ (1).csv", encoding="utf-8-sig")

        # Clean all columns except the first one ('Íµ≠Í∞ÄÎ≥Ñ'), starting from the 3rd row
        for col in df.columns[1:]:
            df.loc[2:, col] = df.loc[2:, col].astype(str).str.replace('[^0-9.-]', '', regex=True)
            df.loc[2:, col] = pd.to_numeric(df.loc[2:, col], errors='coerce')

        # Drop the first two header rows
        df = df.iloc[2:].copy()

        # Drop rows with missing numeric values
        numeric_cols = df.columns[1:]
        df.dropna(subset=numeric_cols, inplace=True)

        return df

    except FileNotFoundError:
        st.error("‚ùå Data file not found. Please make sure it's in the same directory.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå Error during data loading: {e}")
        return pd.DataFrame()

# ================================================================
# 2Ô∏è‚É£ Streamlit Layout
# ================================================================

st.set_page_config(page_title="ACDT Group 31 Dashboard", layout="wide")
st.title("üìà GERD and Real GDP Analysis (ACDT Group 31)")

st.markdown("""
This interactive dashboard performs:
- Data cleaning and preprocessing
- Correlation and regression analysis
- Visualization of key relationships
---
""")

# Load dataset automatically
df_cleaned = load_and_preprocess_data()

if not df_cleaned.empty:
    st.success("‚úÖ Data successfully loaded and preprocessed!")

    # Display preview
    st.subheader("üìã Preview of Cleaned Data")
    st.dataframe(df_cleaned.head())

    # ================================================================
    # 3Ô∏è‚É£ Descriptive Statistics
    # ================================================================
    st.header("üìä Descriptive Statistics")
    st.write(df_cleaned.describe())

    # ================================================================
    # 4Ô∏è‚É£ Correlation Heatmap
    # ================================================================
    st.header("üìà Correlation Heatmap")
    corr = df_cleaned.select_dtypes(include=np.number).corr()
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax)
    st.pyplot(fig)

    # ================================================================
    # 5Ô∏è‚É£ Regression Analysis
    # ================================================================
    st.header("üßÆ Multiple Linear Regression")

    numeric_cols = df_cleaned.select_dtypes(include=np.number).columns.tolist()
    dependent_var = st.selectbox("Select dependent variable (Y)", numeric_cols)
    independent_vars = st.multiselect("Select independent variables (X)", numeric_cols)

    if dependent_var and independent_vars:
        formula = f"{dependent_var} ~ {' + '.join(independent_vars)}"
        st.markdown(f"**Regression Formula:** `{formula}`")

        try:
            model = smf.ols(formula=formula, data=df_cleaned).fit()
            st.subheader("üìò Regression Summary")
            st.text(model.summary())

            # Visualize first independent variable vs dependent variable
            first_x = independent_vars[0]
            st.subheader(f"üìâ Relationship between {dependent_var} and {first_x}")
            fig2, ax2 = plt.subplots()
            sns.regplot(x=first_x, y=dependent_var, data=df_cleaned, ax=ax2)
            st.pyplot(fig2)

        except Exception as e:
            st.error(f"‚ùå Regression failed: {e}")

else:
    st.error("‚ö†Ô∏è Dataset could not be loaded. Please check the file name or encoding.")