# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ================================================================
# üìä ACDT Group 31 Final Streamlit App (v12)
# ================================================================
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf

st.set_page_config(page_title="ACDT Group 31 ‚Äì GERD & GDP Analysis", layout="wide")

# ================================================================
# 1Ô∏è‚É£ Load & Preprocess Data
# ================================================================
@st.cache_data
def load_data():
    try:
        # Step 1. Load raw file (no header)
        df_raw = pd.read_csv("ACDT_final_dataset.csv", header=None, encoding="utf-8-sig")

        # Step 2. Define header (row 1) and drop first two rows
        header_row = df_raw.iloc[1].values
        df = df_raw.iloc[2:].copy()
        df.columns = header_row

        # Step 3. Clean numeric columns
        for col in df.columns:
            df[col] = (
                df[col]
                .astype(str)
                .str.replace(",", "", regex=False)
                .str.replace(r"[^0-9eE+.-]", "", regex=True)
            )
            df[col] = pd.to_numeric(df[col], errors="coerce")

        # Step 4. Drop completely empty rows
        df.dropna(how="all", inplace=True)

        # Step 5. Rename target columns to standard names
        rename_map = {
            "Real GDP (billion USD, PPP-based, Chain-weighted, 2020 base year)": "Real_GDP",
            "Gross Domestic Expenditure on R&D (GERD) (current PPP USD)": "GERD",
        }
        df.rename(columns=rename_map, inplace=True)

        # Step 6. Log transformation
        df["ln_GDP"] = np.log(df["Real_GDP"].replace(0, np.nan))
        df["ln_GERD"] = np.log(df["GERD"].replace(0, np.nan))

        return df

    except Exception as e:
        st.error(f"‚ùå Error loading data: {e}")
        return pd.DataFrame()

# ================================================================
# 2Ô∏è‚É£ App Layout
# ================================================================
st.title("üìà GERD and GDP Full Regression Dashboard ‚Äì ACDT Group 31")

df = load_data()
if df.empty:
    st.error("‚ö†Ô∏è Dataset could not be loaded. Please verify structure or encoding.")
    st.stop()
else:
    st.success("‚úÖ Data successfully loaded and cleaned!")
    st.dataframe(df.head())

# ================================================================
# 3Ô∏è‚É£ Variable Distribution Visualization
# ================================================================
st.header("üìä Variable Distribution")
num_cols = df.select_dtypes(include=np.number).columns.tolist()
if num_cols:
    var = st.selectbox("Select variable:", num_cols)
    fig, ax = plt.subplots(1, 2, figsize=(12, 4))
    sns.histplot(df[var], kde=True, ax=ax[0], color="skyblue")
    sns.boxplot(x=df[var], ax=ax[1], color="salmon")
    st.pyplot(fig)

# ================================================================
# 4Ô∏è‚É£ Correlation Matrix
# ================================================================
st.header("üìà Correlation Matrix")
corr = df.select_dtypes(include=np.number).corr()
fig_corr, ax_corr = plt.subplots(figsize=(10, 8))
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f", ax=ax_corr)
st.pyplot(fig_corr)

# ================================================================
# 5Ô∏è‚É£ Regression Models
# ================================================================
st.header("üßÆ Regression Models (Model 1‚Äì4)")

confounders = ["GDP per Capita", "Labor Force Size"]
mediators = [
    "Resident Patent Applications",
    "Non-Resident Patent Applications",
    "R&D Researchers per Million People",
    "High-tech Export Share (% of Manufactured Exports)",
    "Business R&D Personnel (FTE)"
]
moderators = ["Government-financed BERD (%)", "Business-financed BERD (%)"]

models = {}
try:
    models["Model 1"] = smf.ols("ln_GDP ~ ln_GERD", data=df).fit()

    valid_conf = [c for c in confounders if c in df.columns]
    if valid_conf:
        models["Model 2"] = smf.ols(
            f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{c}\")' for c in valid_conf])}",
            data=df,
        ).fit()
    else:
        models["Model 2"] = models["Model 1"]

    valid_med = [m for m in mediators if m in df.columns]
    if valid_med:
        models["Model 3"] = smf.ols(
            f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{m}\")' for m in valid_med])}",
            data=df,
        ).fit()
    else:
        models["Model 3"] = models["Model 2"]

    valid_mod = [mo for mo in moderators if mo in df.columns]
    if valid_mod:
        interaction = ' + '.join([f'ln_GERD * Q(\"{mo}\")' for mo in valid_mod])
        models["Model 4"] = smf.ols(
            f"ln_GDP ~ {interaction} + {' + '.join([f'Q(\"{m}\")' for m in valid_med])}",
            data=df,
        ).fit()
    else:
        models["Model 4"] = models["Model 3"]

    # ================================================================
    # 6Ô∏è‚É£ Model Summary
    # ================================================================
    summary_data = []
    for name, m in models.items():
        coef = m.params.get("ln_GERD", np.nan)
        pval = m.pvalues.get("ln_GERD", np.nan)
        adjr2 = m.rsquared_adj
        summary_data.append([name, round(coef, 4), round(pval, 4), round(adjr2, 4)])
    st.dataframe(pd.DataFrame(summary_data, columns=["Model", "Œ≤(ln_GERD)", "p-value", "Adj. R¬≤"]))

except Exception as e:
    st.error(f"‚ùå Regression error: {e}")