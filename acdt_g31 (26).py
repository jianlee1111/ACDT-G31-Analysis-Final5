# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ================================================================
# ACDT G31 – Fixed Year-Paired Regressions (Colab spec)
#   X : GERD(2020)
#   Y : GDP(2022)  &  GDP(2023)
#   Models 1~4 with Confounders, Mediators, Moderators (interaction)
# ================================================================
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf

st.set_page_config(page_title="ACDT G31 – GERD(2020) → GDP(2022/2023)", layout="wide")

DATA_FILE = "ACDT_final_dataset.csv"   # 레포에 올린 CSV 이름

# ----------------------------
# 0) File-specific indicator names (원문)
# ----------------------------
GDP_NAME  = "Real GDP (billion USD, PPP-based, Chain-weighted, 2020 base year)"
GERD_NAME = "Gross Domestic Expenditure on R&D (GERD) (current PPP USD)"

MEDIATOR_NAMES = [
    "Resident Patent Applications",
    "Non-Resident Patent Applications",
    "R&D Researchers per Million People",
    "High-tech Export Share (% of Manufactured Exports)",
    "Business R&D Personnel (FTE)",
]
CONFOUNDER_NAMES = [
    "GDP per Capita",
    "Labor Force Size",
]
MODERATOR_NAMES = [
    "Government-financed BERD (%)",
    "Business-financed BERD (%)",
]

# ----------------------------
# 1) Helpers
# ----------------------------
def to_numeric_series(s: pd.Series) -> pd.Series:
    """문자 → 숫자 (Series 전용)"""
    s = s.astype(str).str.replace(",", "", regex=False)
    s = s.str.replace(r"[^0-9eE+\-\.]", "", regex=True)
    return pd.to_numeric(s, errors="coerce")

def read_as_multiindex(path: str) -> pd.DataFrame:
    """0행=연도, 1행=지표명 CSV를 MultiIndex 컬럼으로 로드 + 숫자화"""
    last_err = None
    raw = None
    for enc in ("utf-8-sig", "cp949"):
        try:
            raw = pd.read_csv(path, header=None, encoding=enc, engine="python")
            break
        except Exception as e:
            last_err = e
    if raw is None:
        raise RuntimeError(f"CSV read failed: {last_err}")

    # 한 셀 CSV 방어
    if raw.shape[1] == 1 and isinstance(raw.iloc[0, 0], str):
        cell = raw.iloc[0, 0]
        for sep in (",", "\t", ";"):
            if sep in cell:
                raw = raw[0].str.split(sep, expand=True)
                break

    years = raw.iloc[0].astype(str).values
    names = raw.iloc[1].astype(str).values
    df = raw.iloc[2:].copy()
    df.columns = pd.MultiIndex.from_arrays([names, years], names=["Indicator", "Year"])

    # 숫자화(Series 단위만 처리)
    for ind in df.columns.levels[0]:
        block = df.loc[:, ind]
        for yr in block.columns:
            df[(ind, yr)] = to_numeric_series(block[yr])

    # 연도 정수 캐스팅 (가능한 경우)
    try:
        new_cols = []
        for (ind, yr) in df.columns:
            y = int(float(yr)) if str(yr).replace(".", "", 1).isdigit() else yr
            new_cols.append((ind, y))
        df.columns = pd.MultiIndex.from_tuples(new_cols, names=["Indicator", "Year"])
    except Exception:
        pass

    df.index = pd.RangeIndex(len(df))  # 국가명 없으면 단순 인덱스
    return df

def get_series(df_mi: pd.DataFrame, indicator: str, year) -> pd.Series:
    """지표@연도 Series 추출 (없으면 NaN Series)"""
    if (indicator in df_mi.columns.get_level_values(0)) and (year in df_mi.loc[:, indicator].columns):
        return df_mi.loc[:, (indicator, year)]
    return pd.Series([np.nan] * len(df_mi), index=df_mi.index)

def assemble_dataset(df_mi: pd.DataFrame, x_year, y_year) -> pd.DataFrame:
    """고정된 연도쌍으로 회귀 데이터셋 구성 (Colab 스펙)"""
    out = pd.DataFrame(index=df_mi.index)
    out["GERD"] = get_series(df_mi, GERD_NAME, x_year)
    out["GDP"]  = get_series(df_mi, GDP_NAME,  y_year)

    # Confounders / Mediators / Moderators는 Y-year 값을 사용(Colab 흐름)
    for nm in CONFOUNDER_NAMES:
        out[nm] = get_series(df_mi, nm, y_year)
    for nm in MEDIATOR_NAMES:
        out[nm] = get_series(df_mi, nm, y_year)
    for nm in MODERATOR_NAMES:
        out[nm] = get_series(df_mi, nm, y_year)

    # 로그변환
    out["ln_X"] = np.log(out["GERD"].replace({0: np.nan}))
    out["ln_Y"] = np.log(out["GDP"].replace({0: np.nan}))

    # 결측 제거 (ln_X, ln_Y 최소)
    out = out.dropna(subset=["ln_X", "ln_Y"]).reset_index(drop=True)
    return out

def run_models(df_reg: pd.DataFrame):
    """Model 1~4 실행 및 요약표 반환"""
    # 안전하게 존재하는 변수만 수집
    confs = [c for c in CONFOUNDER_NAMES if c in df_reg.columns]
    meds  = [m for m in MEDIATOR_NAMES if m in df_reg.columns]
    mods  = [m for m in MODERATOR_NAMES if m in df_reg.columns]

    # Model 1
    m1 = smf.ols("ln_Y ~ ln_X", data=df_reg).fit()

    # Model 2 (+confounders)
    rhs2 = "ln_X" + (" + " + " + ".join([f'Q(\"{c}\")' for c in confs]) if confs else "")
    m2 = smf.ols(f"ln_Y ~ {rhs2}", data=df_reg).fit()

    # Model 3 (+mediators)
    rhs3 = rhs2 + (" + " + " + ".join([f'Q(\"{m}\")' for m in meds]) if meds else "")
    m3 = smf.ols(f"ln_Y ~ {rhs3}", data=df_reg).fit()

    # Model 4 (+moderators as interactions with ln_X)
    inter = " + ".join([f'ln_X * Q(\"{mo}\")' for mo in mods]) if mods else ""
    rhs4 = rhs3 if not inter else f"{rhs3} + {inter}"
    m4 = smf.ols(f"ln_Y ~ {rhs4}", data=df_reg).fit()

    # 비교표
    def pick(model, name="ln_X"):
        return model.params.get(name, np.nan), model.pvalues.get(name, np.nan), model.rsquared_adj

    rows = []
    for label, model in [("M1: lnY~lnX", m1), ("M2:+conf", m2), ("M3:+med", m3), ("M4:+mods", m4)]:
        beta, pval, adjr2 = pick(model, "ln_X")
        rows.append([label, beta, pval, adjr2])

    summary = pd.DataFrame(rows, columns=["Model", "β(ln_X)", "p(ln_X)", "Adj.R²"]).round(4)
    return {"M1": m1, "M2": m2, "M3": m3, "M4": m4}, summary

# ----------------------------
# 2) Load & Build two fixed pairs (GERD@2020 → GDP@2022, @2023)
# ----------------------------
st.title("📈 GERD(2020) → GDP(2022/2023) – Full Regressions (Model 1–4)")

try:
    df_mi = read_as_multiindex(DATA_FILE)
except Exception as e:
    st.error(f"Error loading data: {e}")
    st.stop()

st.success("✅ Dataset loaded (0행=Year, 1행=Indicator → MultiIndex).")

# 고정 연도
X_YEAR = 2020
Y_YEARS = [2022, 2023]

for yyr in Y_YEARS:
    st.header(f"🧮 Pair: GERD({X_YEAR}) → GDP({yyr})")

    df_reg = assemble_dataset(df_mi, x_year=X_YEAR, y_year=yyr)
    if df_reg.empty:
        st.warning(f"No valid observations for GERD({X_YEAR}) → GDP({yyr}).")
        continue

    st.subheader("📋 Regression dataset (preview)")
    st.dataframe(df_reg.head())

    # 산점도 (ln_GERD_2020 vs ln_GDP_yyr)
    fig, ax = plt.subplots(figsize=(7,5))
    sns.regplot(x="ln_X", y="ln_Y", data=df_reg, ax=ax, scatter_kws={"alpha":0.6})
    ax.set_xlabel(f"ln GERD ({X_YEAR})")
    ax.set_ylabel(f"ln GDP ({yyr})")
    st.pyplot(fig)

    # Model 1~4 실행
    models, table = run_models(df_reg)
    st.subheader("📘 Model Comparison")
    st.dataframe(table)

    # R² 막대
    fig_r2, ax_r2 = plt.subplots(figsize=(6,4))
    sns.barplot(x="Model", y="Adj.R²", data=table, ax=ax_r2)
    ax_r2.set_ylim(0, max(table["Adj.R²"]) * 1.1 if len(table) else 1)
    st.pyplot(fig_r2)

    with st.expander("Full summaries"):
        for k in ["M1","M2","M3","M4"]:
            st.markdown(f"**{k}**")
            st.text(models[k].summary())

st.caption("All regressions follow your original Colab spec: fixed year-pairs, log-log, Model1~4 with confounders/mediators/moderators.")