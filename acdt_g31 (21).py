# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ================================================================
# üìä ACDT Group 31 Final Streamlit Dashboard (v11 - Guaranteed Fix)
# ================================================================
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf

st.set_page_config(page_title="ACDT Group 31 ‚Äì GERD & GDP Analysis", layout="wide")

@st.cache_data
def load_and_clean_data():
    try:
        path = "ACDT_final_dataset.csv"

        # Step 1Ô∏è‚É£ Try standard load
        try:
            df_raw = pd.read_csv(path, header=None, encoding="utf-8-sig")
        except Exception:
            df_raw = pd.read_csv(path, header=None, encoding="cp949")

        # Step 2Ô∏è‚É£ If only one column, split manually
        if df_raw.shape[1] == 1:
            first_line = str(df_raw.iloc[0, 0])
            if "\t" in first_line:
                df_raw = df_raw[0].str.split("\t", expand=True)
            elif ";" in first_line:
                df_raw = df_raw[0].str.split(";", expand=True)
            elif "," in first_line:
                df_raw = df_raw[0].str.split(",", expand=True)
            else:
                st.error("‚ö†Ô∏è Could not detect delimiter automatically.")
                return pd.DataFrame()

        # Step 3Ô∏è‚É£ Now use 2nd row as header
        header_row = df_raw.iloc[1].astype(str).str.strip()
        df = df_raw.drop([0, 1]).reset_index(drop=True)
        df.columns = header_row

        # Step 4Ô∏è‚É£ Clean numeric values
        for col in df.columns:
            df[col] = (
                df[col]
                .astype(str)
                .str.replace(",", "", regex=False)
                .str.replace(r"[^0-9eE+.-]", "", regex=True)
            )
            df[col] = pd.to_numeric(df[col], errors="coerce")

        # Step 5Ô∏è‚É£ Clean column names
        df.columns = (
            df.columns.str.strip()
            .str.replace("\ufeff", "")
            .str.replace("\xa0", "")
        )

        # Step 6Ô∏è‚É£ Identify GDP and GERD columns
        rename_map = {}
        for col in df.columns:
            c = col.lower()
            if "real gdp" in c or ("gdp" in c and "real" in c):
                rename_map[col] = "Real_GDP"
            elif "gerd" in c or "gross domestic expenditure" in c:
                rename_map[col] = "GERD"
        df.rename(columns=rename_map, inplace=True)

        if "Real_GDP" not in df.columns or "GERD" not in df.columns:
            st.warning("‚ö†Ô∏è Could not find 'Real_GDP' or 'GERD' columns after cleaning.")
            st.write("Detected columns:", list(df.columns))
            return pd.DataFrame()

        # Step 7Ô∏è‚É£ Log-transform
        df["ln_GDP"] = np.log(df["Real_GDP"].replace(0, np.nan))
        df["ln_GERD"] = np.log(df["GERD"].replace(0, np.nan))

        return df

    except Exception as e:
        st.error(f"‚ùå Error during data load: {e}")
        return pd.DataFrame()


# ================================================================
# 2Ô∏è‚É£ Main UI
# ================================================================
st.title("üìà GERD and GDP Full Regression Dashboard ‚Äì ACDT Group 31")
df = load_and_clean_data()

if df.empty:
    st.error("‚ö†Ô∏è Dataset could not be loaded. Please verify structure or encoding.")
    st.stop()
else:
    st.success("‚úÖ Data successfully loaded and cleaned!")
    st.dataframe(df.head())


# ================================================================
# 3Ô∏è‚É£ Visualization
# ================================================================
st.header("üìä Variable Distribution")
num_cols = df.select_dtypes(include=np.number).columns.tolist()
if num_cols:
    var = st.selectbox("Select variable:", num_cols)
    fig, ax = plt.subplots(1, 2, figsize=(12, 4))
    sns.histplot(df[var], kde=True, ax=ax[0])
    sns.boxplot(x=df[var], ax=ax[1])
    st.pyplot(fig)

# ================================================================
# 4Ô∏è‚É£ Regression Models
# ================================================================
st.header("üßÆ Regression Models (Model 1‚Äì4)")

confounders = ["GDP per Capita", "Labor Force Size"]
mediators = [
    "Resident Patent Applications",
    "Non-Resident Patent Applications",
    "R&D Researchers per Million People",
    "High-tech Export Share (% of Manufactured Exports)",
    "Business R&D Personnel (FTE)"
]
moderators = ["Government-financed BERD (%)", "Business-financed BERD (%)"]

models = {}
try:
    models["Model 1"] = smf.ols("ln_GDP ~ ln_GERD", data=df).fit()

    valid_conf = [c for c in confounders if c in df.columns]
    if valid_conf:
        models["Model 2"] = smf.ols(
            f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{c}\")' for c in valid_conf])}",
            data=df,
        ).fit()
    else:
        models["Model 2"] = models["Model 1"]

    valid_med = [m for m in mediators if m in df.columns]
    if valid_med:
        models["Model 3"] = smf.ols(
            f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{m}\")' for m in valid_med])}",
            data=df,
        ).fit()
    else:
        models["Model 3"] = models["Model 2"]

    valid_mod = [mo for mo in moderators if mo in df.columns]
    if valid_mod:
        interaction = ' + '.join([f'ln_GERD * Q(\"{mo}\")' for mo in valid_mod])
        models["Model 4"] = smf.ols(
            f"ln_GDP ~ {interaction} + {' + '.join([f'Q(\"{m}\")' for m in valid_med])}",
            data=df,
        ).fit()
    else:
        models["Model 4"] = models["Model 3"]

    summary_data = []
    for name, m in models.items():
        coef = m.params.get("ln_GERD", np.nan)
        pval = m.pvalues.get("ln_GERD", np.nan)
        adjr2 = m.rsquared_adj
        summary_data.append([name, round(coef, 4), round(pval, 4), round(adjr2, 4)])

    st.dataframe(pd.DataFrame(summary_data, columns=["Model", "Œ≤(ln_GERD)", "p-value", "Adj. R¬≤"]))

except Exception as e:
    st.error(f"‚ùå Regression error: {e}")