# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

@st.cache_data
def read_as_multiindex_v2(path: str, debug: bool = False) -> pd.DataFrame:
    import pandas as pd
    import numpy as np

    # 1) CSV 읽기 (인코딩 2종 시도)
    raw, last_err = None, None
    for enc in ("utf-8-sig", "cp949"):
        try:
            raw = pd.read_csv(path, header=None, encoding=enc, engine="python")
            break
        except Exception as e:
            last_err = e
    if raw is None:
        raise RuntimeError(f"CSV read failed: {last_err}")

    # ── 🔎 디버그: 원시 헤더 상태 확인 ──
    if debug:
        st.subheader("🔎 DEBUG: Raw CSV (before parsing)")
        st.write("raw.shape:", raw.shape)

        r0 = raw.iloc[0]
        r1 = raw.iloc[1]
        if isinstance(r0, pd.DataFrame): r0 = r0.squeeze(axis=0)
        if isinstance(r1, pd.DataFrame): r1 = r1.squeeze(axis=0)

        st.write("row0 (years) — first 30:", r0.astype(str).tolist()[:30])
        st.write("row1 (indicator names) — first 30:", r1.astype(str).tolist()[:30])

        # 표로 미리보기
        st.dataframe(raw.iloc[:6, :20])
        st.info("⬆️ 위 내용을 캡쳐해서 보내줘. (아래 파싱은 중단)")
        st.stop()  # 여기서 앱 멈춤 → 화면 캡쳐/복사하기 좋음

    # 2) 단일 컬럼이면 구분자 감지 후 split
    if int(raw.shape[1]) == 1:
        try:
            sample = raw.iloc[:min(5, len(raw)), 0].astype(str).tolist()
            sample_text = "\n".join(sample)
            found_sep = None
            for s in (",", "\t", ";"):
                if sample_text.find(s) != -1:
                    found_sep = s
                    break
            if found_sep is not None:
                col0 = raw.iloc[:, 0].astype(str)
                raw = col0.str.split(found_sep, expand=True)
        except Exception:
            pass

    # 3) 멀티인덱스 구성
    row0 = raw.iloc[0]
    row1 = raw.iloc[1]
    if isinstance(row0, pd.DataFrame): row0 = row0.squeeze(axis=0)
    if isinstance(row1, pd.DataFrame): row1 = row1.squeeze(axis=0)

    years = row0.astype(str).str.strip().values
    names = row1.astype(str).str.strip().values

    df = raw.iloc[2:].copy()
    df.columns = pd.MultiIndex.from_arrays([names, years], names=["Indicator", "Year"])

    # 4) 숫자 클리닝
    def clean_series(s: pd.Series) -> pd.Series:
        s = s.astype(str)
        s = s.str.replace(",", "", regex=False)
        s = s.str.replace(r"[^0-9eE+\-\.]", "", regex=True)
        return pd.to_numeric(s, errors="coerce")
    for j in range(df.shape[1]):
        df.iloc[:, j] = clean_series(df.iloc[:, j])

    # 5) 연도 int 캐스팅 (가능하면)
    try:
        new_cols = []
        for ind, yr in df.columns:
            ystr = str(yr)
            if ystr.replace(".", "", 1).isdigit():
                yv = int(float(ystr))
            else:
                yv = yr
            new_cols.append((ind, yv))
        df.columns = pd.MultiIndex.from_tuples(new_cols, names=["Indicator", "Year"])
    except Exception:
        pass

    # 6) 중복 컬럼 → 평균 통합
    if bool(df.columns.duplicated(keep=False).any()):
        df = df.T.groupby(level=["Indicator", "Year"]).mean(numeric_only=True).T
        df.index = pd.RangeIndex(len(df))

    return df