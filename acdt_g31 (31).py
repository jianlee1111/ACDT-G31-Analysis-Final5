# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ============================================
# ACDT G31 – GERD(2020) → GDP(2022/2023)
# Full Regressions (Model 1–4) + Viz + Summary
# - CSV: 0행=Year, 1행=Indicator, 2행~ 데이터
# - 한 열 CSV(텍스트)도 안전 분할
# - 숫자 정제는 Series 전용 .str 사용
# - (Indicator, Year) 중복열은 평균으로 통합
# ============================================

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf

st.set_page_config(page_title="ACDT G31 – GERD→GDP (Year-paired)", layout="wide")

DATA_FILE = "ACDT_final_dataset.csv"  # 레포/로컬 루트에 위치

# ---------- 지표 라벨(데이터셋과 정확히 일치 필요) ----------
GDP_NAME  = "Real GDP (billion USD, PPP-based, Chain-weighted, 2020 base year)"
GERD_NAME = "Gross Domestic Expenditure on R&D (GERD) (current PPP USD)"

MEDIATOR_NAMES = [
    "Resident Patent Applications",
    "Non-Resident Patent Applications",
    "R&D Researchers per Million People",
    "High-tech Export Share (% of Manufactured Exports)",
    "Business R&D Personnel (FTE)",
]
CONFOUNDER_NAMES = ["GDP per Capita", "Labor Force Size"]
MODERATOR_NAMES  = ["Government-financed BERD (%)", "Business-financed BERD (%)"]

X_YEAR = 2020
Y_YEARS = [2022, 2023]

# ---------- 안전 CSV 파서 ----------
def read_as_multiindex(path: str) -> pd.DataFrame:
    """
    CSV를 읽어 0행=Year, 1행=Indicator로 MultiIndex 컬럼 구성.
    - 한 열 CSV(텍스트)도 문자열로만 분리자 감지 후 안전 분할
    - 숫자 정제는 Series에서만 .str 사용 → truth ambiguity 회피
    - (Indicator,Year) 중복열은 행별 평균으로 통합
    """
    raw, last_err = None, None
    for enc in ("utf-8-sig", "cp949"):
        try:
            raw = pd.read_csv(path, header=None, encoding=enc, engine="python")
            break
        except Exception as e:
            last_err = e
    if raw is None:
        raise RuntimeError(f"CSV read failed: {last_err}")

    # 한 열 CSV일 때: 여러 행을 합쳐 문자열 하나로만 검사 → Series를 if에 넣지 않음
    if raw.shape[1] == 1:
        try:
            n = min(5, len(raw))
            sample_text = "\n".join(raw.iloc[:n, 0].astype(str).tolist())
            for sep in (",", "\t", ";"):
                if sep in sample_text:  # 문자열만 평가
                    s = raw.iloc[:, 0].astype(str)         # 반드시 Series
                    raw = s.str.split(sep, expand=True)    # Series.str.split 만 사용
                    break
        except Exception:
            pass  # 실패 시 원본 유지

    # 0행=연도, 1행=지표명
    years = raw.iloc[0].astype(str).str.strip().values
    names = raw.iloc[1].astype(str).str.strip().values
    df = raw.iloc[2:].copy()

    # MultiIndex 컬럼 생성
    df.columns = pd.MultiIndex.from_arrays([names, years], names=["Indicator", "Year"])

    # 숫자 정제(Series 전용 .str)
    def clean_series(s: pd.Series) -> pd.Series:
        s = s.astype(str)
        s = s.str.replace(",", "", regex=False)
        s = s.str.replace(r"[^0-9eE+\-\.]", "", regex=True)
        return pd.to_numeric(s, errors="coerce")

    for j in range(df.shape[1]):
        df.iloc[:, j] = clean_series(df.iloc[:, j])

    # Year를 정수로 바꿀 수 있으면 변환
    try:
        new_cols = []
        for ind, yr in df.columns:
            ystr = str(yr)
            if ystr.replace(".", "", 1).isdigit():
                y = int(float(ystr))
            else:
                y = yr
            new_cols.append((ind, y))
        df.columns = pd.MultiIndex.from_tuples(new_cols, names=["Indicator", "Year"])
    except Exception:
        pass

    # (Indicator, Year) 중복열 → 평균으로 통합
    if df.columns.duplicated(keep=False).any():
        df = df.T.groupby(level=["Indicator", "Year"]).mean(numeric_only=True).T

    df.index = pd.RangeIndex(len(df))
    return df


def s_at(df_mi: pd.DataFrame, name: str, year) -> pd.Series:
    """(Indicator=name, Year=year) Series 안전 추출. 없으면 NaN Series 반환."""
    # 중첩 if로 모호성 방지
    lvl0 = df_mi.columns.get_level_values(0)
    if name in set(lvl0):
        sub = df_mi.loc[:, name]             # (행 x Year)
        if year in set(sub.columns):
            return df_mi.loc[:, (name, year)]
    return pd.Series([np.nan] * len(df_mi), index=df_mi.index)


def build_pair_dataset(df_mi: pd.DataFrame, x_year: int, y_year: int) -> pd.DataFrame:
    """GERD(x_year) → GDP(y_year) 회귀용 데이터 구성 + 로그 변환."""
    out = pd.DataFrame(index=df_mi.index)
    out["GERD"] = s_at(df_mi, GERD_NAME, x_year)
    out["GDP"]  = s_at(df_mi, GDP_NAME,  y_year)

    for v in CONFOUNDER_NAMES + MEDIATOR_NAMES + MODERATOR_NAMES:
        out[v] = s_at(df_mi, v, y_year)

    # 로그 변환(0은 NaN 처리)
    out["ln_X"] = np.log(out["GERD"].replace({0: np.nan}))
    out["ln_Y"] = np.log(out["GDP"].replace({0: np.nan}))
    return out.dropna(subset=["ln_X", "ln_Y"]).reset_index(drop=True)


def run_models(df_reg: pd.DataFrame):
    """Model1~4 실행 + 비교표 반환."""
    confs = [c for c in CONFOUNDER_NAMES if c in df_reg.columns]
    meds  = [m for m in MEDIATOR_NAMES  if m in df_reg.columns]
    mods  = [m for m in MODERATOR_NAMES if m in df_reg.columns]

    # M1
    m1 = smf.ols("ln_Y ~ ln_X", data=df_reg).fit()

    # M2
    rhs2 = "ln_X" + ((" + " + " + ".join([f'Q(\"{c}\")' for c in confs])) if confs else "")
    m2 = smf.ols(f"ln_Y ~ {rhs2}", data=df_reg).fit()

    # M3
    rhs3 = rhs2 + ((" + " + " + ".join([f'Q(\"{m}\")' for m in meds])) if meds else "")
    m3 = smf.ols(f"ln_Y ~ {rhs3}", data=df_reg).fit()

    # M4 (interaction)
    inter = " + ".join([f'ln_X * Q(\"{mo}\")' for mo in mods]) if mods else ""
    rhs4 = rhs3 if not inter else f"{rhs3} + {inter}"
    m4 = smf.ols(f"ln_Y ~ {rhs4}", data=df_reg).fit()

    def pick(mod, key="ln_X"):
        return mod.params.get(key, np.nan), mod.pvalues.get(key, np.nan), mod.rsquared_adj

    rows = []
    for label, mod in [("M1: lnY~lnX", m1), ("M2:+conf", m2), ("M3:+med", m3), ("M4:+mods", m4)]:
        beta, pval, adjr2 = pick(mod, "ln_X")
        rows.append([label, beta, pval, adjr2])

    summary = pd.DataFrame(rows, columns=["Model", "β(ln_X)", "p(ln_X)", "Adj.R²"]).round(4)
    return {"M1": m1, "M2": m2, "M3": m3, "M4": m4}, summary


# ---------- 앱 ----------
st.title("📈 GERD(2020) → GDP(2022/2023) – Full Regressions (Model 1–4)")

try:
    df_mi = read_as_multiindex(DATA_FILE)
except Exception as e:
    st.error(f"Error loading data: {e}")
    st.stop()

st.success("✅ Dataset loaded & cleaned (Row0=Year / Row1=Indicator).")

# 전체 숫자 분포 & 상관
st.header("📊 Distributions & Correlations")
flat = df_mi.copy()
flat.columns = [f"{a} [{b}]" for a, b in flat.columns]  # MultiIndex → 평평한 이름
num_only = flat.select_dtypes(include=np.number)

if not num_only.empty:
    st.write(num_only.describe().T)
    try:
        fig_corr, ax_corr = plt.subplots(figsize=(12, 7))
        sns.heatmap(num_only.corr(), cmap="coolwarm", center=0, ax=ax_corr)
        ax_corr.set_title("Correlation Heatmap")
        st.pyplot(fig_corr)
    except Exception:
        st.info("Correlation heatmap skipped.")

# 두 연도쌍 고정 회귀 (2020→2022, 2020→2023)
for yyr in Y_YEARS:
    st.markdown("---")
    st.header(f"🧮 Pair: GERD({X_YEAR}) → GDP({yyr})")

    df_reg = build_pair_dataset(df_mi, X_YEAR, yyr)
    if df_reg.empty:
        st.warning("No valid observations for this pair after cleaning (ln_X/ln_Y).")
        continue

    st.subheader("📋 Regression dataset (preview)")
    st.dataframe(df_reg.head())

    # 산점도 + 회귀선
    st.subheader("📉 ln(GERD) vs ln(GDP)")
    fig_sc, ax_sc = plt.subplots(figsize=(7, 5))
    sns.regplot(x="ln_X", y="ln_Y", data=df_reg, scatter_kws={"alpha": 0.6}, ax=ax_sc)
    ax_sc.set_xlabel(f"ln GERD ({X_YEAR})")
    ax_sc.set_ylabel(f"ln GDP ({yyr})")
    st.pyplot(fig_sc)

    # Model 1–4
    models, table = run_models(df_reg)
    st.subheader("📘 Model Comparison")
    st.dataframe(table)

    fig_r2, ax_r2 = plt.subplots(figsize=(6, 4))
    sns.barplot(x="Model", y="Adj.R²", data=table, ax=ax_r2)
    ymax = float(table["Adj.R²"].max()) if len(table) else 1.0
    ax_r2.set_ylim(0, max(0.1, ymax) * 1.1)
    ax_r2.set_title("Adjusted R² across models")
    st.pyplot(fig_r2)

    with st.expander("Full regression summaries"):
        for k, m in models.items():
            st.markdown(f"**{k}**")
            st.text(m.summary())

# 해석 섹션
st.markdown("""
### 🧩 Interpretation
- **Model 1**: GERD→GDP의 기본 탄력성(ln-ln).
- **Model 2**: 교란변수(예: GDP per Capita, Labor Force) 통제 후 lnGERD 계수 변화로 **혼란효과** 점검.
- **Model 3**: 특허·연구인력·하이테크수출·기업R&D인력(매개) 추가 → lnGERD 계수 감소/유의 변화 시 **매개효과** 시사.
- **Model 4**: 정부/민간 BERD 비중과의 상호작용 → 상호작용 p<0.05면 **조절효과** 유의.
""")