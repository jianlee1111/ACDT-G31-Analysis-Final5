# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ================================================================
# 📊 ACDT Group 31 Final Streamlit Dashboard (v10 - Auto-Fix CSV)
# ================================================================
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf
import csv

st.set_page_config(page_title="ACDT Group 31 – GERD & GDP Full Analysis", layout="wide")

@st.cache_data
def load_and_clean_data():
    """
    Loads the dataset even if delimiter or encoding are wrong.
    Auto-fixes CSV files with 1-column issue (tab/semicolon separator).
    """
    try:
        # Try default load first
        df_raw = pd.read_csv("ACDT_final_dataset.csv", header=None, encoding="utf-8-sig")

        # 🚨 CASE 1: whole file collapsed into one column
        if df_raw.shape[1] == 1:
            text_col = df_raw.columns[0]
            sample = str(df_raw.iloc[0, 0])[:1000]
            # Try to guess delimiter manually
            if "\t" in sample:
                delimiter = "\t"
            elif ";" in sample:
                delimiter = ";"
            else:
                delimiter = ","
            df_raw = pd.read_csv("ACDT_final_dataset.csv", header=None, sep=delimiter, encoding="utf-8-sig", engine="python")

        # 🚨 CASE 2: not enough rows
        if df_raw.shape[0] < 2:
            st.error("❌ File has fewer than 2 rows.")
            return pd.DataFrame()

        # 2️⃣ Use 2nd row as header
        header_row = df_raw.iloc[1]
        if not isinstance(header_row, pd.Series):
            # Fix for DataFrame-type row
            header_row = pd.Series(header_row.iloc[0].split(",")) if isinstance(header_row.iloc[0], str) else header_row
        df = df_raw.drop([0, 1]).reset_index(drop=True)
        df.columns = header_row.astype(str).str.strip()

        # 3️⃣ Clean numeric cells
        for col in df.columns:
            df[col] = (
                df[col]
                .astype(str)
                .str.replace(",", "", regex=False)
                .str.replace(r"[^0-9eE+.-]", "", regex=True)
            )
            df[col] = pd.to_numeric(df[col], errors="coerce")

        df.dropna(how="all", inplace=True)
        df.columns = df.columns.str.strip().str.replace("\ufeff", "").str.replace("\xa0", "")

        # Rename relevant columns
        rename_map = {}
        for col in df.columns:
            c = col.lower()
            if "real gdp" in c or ("gdp" in c and "real" in c):
                rename_map[col] = "Real_GDP"
            elif "gerd" in c or "gross domestic expenditure" in c:
                rename_map[col] = "GERD"
        df.rename(columns=rename_map, inplace=True)

        # Check essential variables
        if "Real_GDP" not in df.columns or "GERD" not in df.columns:
            st.warning("⚠️ Could not find 'Real_GDP' or 'GERD' columns.")
            st.write("Detected columns:", df.columns.tolist())
            return pd.DataFrame()

        # Add log transforms
        df["ln_GDP"] = np.log(df["Real_GDP"].replace(0, np.nan))
        df["ln_GERD"] = np.log(df["GERD"].replace(0, np.nan))
        return df

    except Exception as e:
        st.error(f"❌ Error during data load: {e}")
        return pd.DataFrame()


# ================================================================
# 2️⃣ App Layout
# ================================================================
st.title("📈 GERD and GDP Full Regression Dashboard – ACDT Group 31")

df = load_and_clean_data()
if df.empty:
    st.error("⚠️ Dataset could not be loaded. Please verify structure or encoding.")
    st.stop()
else:
    st.success("✅ Data successfully loaded and cleaned!")
    st.dataframe(df.head())

# ================================================================
# 3️⃣ Distribution
# ================================================================
st.header("📊 Variable Distribution")
num_cols = df.select_dtypes(include=np.number).columns.tolist()
if num_cols:
    var = st.selectbox("Select variable:", num_cols)
    fig, ax = plt.subplots(1, 2, figsize=(12, 4))
    sns.histplot(df[var], kde=True, ax=ax[0], color="skyblue")
    sns.boxplot(x=df[var], ax=ax[1], color="salmon")
    st.pyplot(fig)

# ================================================================
# 4️⃣ Correlation Heatmap
# ================================================================
st.header("📈 Correlation Heatmap")
corr = df.select_dtypes(include=np.number).corr()
fig_corr, ax_corr = plt.subplots(figsize=(10, 8))
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f", ax=ax_corr)
st.pyplot(fig_corr)

# ================================================================
# 5️⃣ Regression Models
# ================================================================
st.header("🧮 Regression Models (Model 1–4)")

confounders = ["GDP per Capita", "Labor Force Size"]
mediators = [
    "Resident Patent Applications",
    "Non-Resident Patent Applications",
    "R&D Researchers per Million People",
    "High-tech Export Share (% of Manufactured Exports)",
    "Business R&D Personnel (FTE)"
]
moderators = ["Government-financed BERD (%)", "Business-financed BERD (%)"]

models = {}
try:
    # Model 1
    models["Model 1"] = smf.ols("ln_GDP ~ ln_GERD", data=df).fit()

    # Model 2
    valid_conf = [c for c in confounders if c in df.columns]
    if valid_conf:
        models["Model 2"] = smf.ols(f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{c}\")' for c in valid_conf])}", data=df).fit()
    else:
        models["Model 2"] = models["Model 1"]

    # Model 3
    valid_med = [m for m in mediators if m in df.columns]
    if valid_med:
        models["Model 3"] = smf.ols(f"ln_GDP ~ ln_GERD + {' + '.join([f'Q(\"{m}\")' for m in valid_med])}", data=df).fit()
    else:
        models["Model 3"] = models["Model 2"]

    # Model 4
    valid_mod = [mo for mo in moderators if mo in df.columns]
    if valid_mod:
        interaction = ' + '.join([f'ln_GERD * Q(\"{mo}\")' for mo in valid_mod])
        models["Model 4"] = smf.ols(f"ln_GDP ~ {interaction} + {' + '.join([f'Q(\"{m}\")' for m in valid_med])}", data=df).fit()
    else:
        models["Model 4"] = models["Model 3"]

    # Comparison table
    summary_data = []
    for name, m in models.items():
        coef = m.params.get("ln_GERD", np.nan)
        pval = m.pvalues.get("ln_GERD", np.nan)
        adjr2 = m.rsquared_adj
        summary_data.append([name, round(coef, 4), round(pval, 4), round(adjr2, 4)])
    summary_df = pd.DataFrame(summary_data, columns=["Model", "β(ln_GERD)", "p-value", "Adj. R²"])
    st.dataframe(summary_df)

    fig_r2, ax_r2 = plt.subplots()
    sns.barplot(x="Model", y="Adj. R²", data=summary_df, palette="Blues_d", ax=ax_r2)
    ax_r2.set_title("Adjusted R² Across Models")
    st.pyplot(fig_r2)

except Exception as e:
    st.error(f"❌ Regression error: {e}")