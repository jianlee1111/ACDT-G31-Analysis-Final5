# -*- coding: utf-8 -*-
"""acdt_g31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5fm0D95_3CLMpKv3LVVCJCWz4Vwmcv_
"""

# ================================================================
# üìä ACDT Group 31 ‚Äì Final Streamlit App (Full Version, Fixed Path)
# ================================================================
# Features:
#  - Cleans and preprocesses ACDT_final_dataset.csv
#  - Visualizes variable distributions
#  - Correlation between GERD and GDP
#  - Multiple Regression (Model 1‚Äì4)
#  - Displays results with summaries and plots
# ================================================================

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf
import os

st.set_page_config(page_title="ACDT Group 31 Analysis", layout="wide")

# ================================================================
# 1Ô∏è‚É£ Load and Clean Data
# ================================================================
@st.cache_data
def load_and_preprocess_data():
    try:
        if not os.path.exists("./ACDT_final_dataset.csv"):
            st.error("‚ùå Data file not found in repository root.")
            return pd.DataFrame()

        df = pd.read_csv("./ACDT_final_dataset.csv", encoding="utf-8-sig")
        df = df.iloc[2:].copy()  # Remove header rows

        # Clean numeric columns
        for col in df.columns[1:]:
            df[col] = (
                df[col]
                .astype(str)
                .str.replace('[^0-9.-]', '', regex=True)
            )
            df[col] = pd.to_numeric(df[col], errors="coerce")

        df.dropna(inplace=True)

        # Log transform
        if 'Real GDP' in df.columns and 'Gross Domestic Expenditure on R&D (GERD) (current PPP USD)' in df.columns:
            df['Log_Real_GDP'] = np.log(df['Real GDP'] + 1e-9)
            df['Log_GERD'] = np.log(df['Gross Domestic Expenditure on R&D (GERD) (current PPP USD)'] + 1e-9)

        return df

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error loading data: {e}")
        return pd.DataFrame()

# ================================================================
# 2Ô∏è‚É£ Load Data
# ================================================================
df = load_and_preprocess_data()
st.title("üìà GERD and GDP Regression Dashboard ‚Äì ACDT Group 31")

if df.empty:
    st.stop()
else:
    st.success("‚úÖ Data loaded successfully!")

# ================================================================
# 3Ô∏è‚É£ Variable Distributions
# ================================================================
st.header("üìä Variable Distributions")

num_cols = df.select_dtypes(include=np.number).columns
selected_var = st.selectbox("Select a variable to visualize its distribution:", num_cols)

fig, ax = plt.subplots(1, 2, figsize=(12, 4))
sns.histplot(df[selected_var], kde=True, ax=ax[0], color="skyblue")
ax[0].set_title(f"Distribution of {selected_var}")
sns.boxplot(df[selected_var], ax=ax[1], color="lightcoral")
ax[1].set_title(f"Boxplot of {selected_var}")
st.pyplot(fig)

# ================================================================
# 4Ô∏è‚É£ GERD‚ÄìGDP Correlation
# ================================================================
st.header("üìà Correlation between GERD and GDP")

if 'Log_GERD' in df.columns and 'Log_Real_GDP' in df.columns:
    corr_val = df['Log_GERD'].corr(df['Log_Real_GDP'])
    st.markdown(f"**Correlation (Log_GERD vs Log_Real_GDP):** {corr_val:.3f}")

    fig_corr, ax_corr = plt.subplots()
    sns.regplot(x='Log_GERD', y='Log_Real_GDP', data=df, ax=ax_corr)
    ax_corr.set_title("Log(GERD) vs Log(Real GDP)")
    st.pyplot(fig_corr)

# ================================================================
# 5Ô∏è‚É£ Correlation Heatmap
# ================================================================
st.header("üå°Ô∏è Correlation Heatmap (All Numeric Variables)")
corr = df[num_cols].corr()
fig_heat, ax_heat = plt.subplots(figsize=(12, 8))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", ax=ax_heat)
st.pyplot(fig_heat)

# ================================================================
# 6Ô∏è‚É£ Regression Models (Model 1‚Äì4)
# ================================================================
st.header("üßÆ Multiple Linear Regression Models")

confounder = 'GDP per Capita' if 'GDP per Capita' in df.columns else None
mediators = [
    col for col in df.columns if any(x in col for x in ['Patent', 'Researcher', 'Export', 'Personnel'])
]
moderator = 'Government-financed BERD (%)' if 'Government-financed BERD (%)' in df.columns else None

models = {}

try:
    models['Model 1'] = smf.ols('Log_Real_GDP ~ Log_GERD', data=df).fit()
    if confounder:
        models['Model 2'] = smf.ols(f'Log_Real_GDP ~ Log_GERD + Q("{confounder}")', data=df).fit()
    else:
        models['Model 2'] = models['Model 1']

    if mediators:
        models['Model 3'] = smf.ols(f'Log_Real_GDP ~ Log_GERD + {" + ".join([f"Q(\'{m}\')" for m in mediators])}', data=df).fit()
    else:
        models['Model 3'] = models['Model 2']

    if moderator:
        models['Model 4'] = smf.ols(
            f'Log_Real_GDP ~ Log_GERD * Q("{moderator}") + {" + ".join([f"Q(\'{m}\')" for m in mediators])}',
            data=df
        ).fit()
    else:
        models['Model 4'] = models['Model 3']

    # Model summary table
    summary_data = []
    for name, m in models.items():
        coef = m.params.get('Log_GERD', np.nan)
        pval = m.pvalues.get('Log_GERD', np.nan)
        adjr2 = m.rsquared_adj
        summary_data.append([name, round(coef, 4), round(pval, 4), round(adjr2, 4)])

    st.subheader("üìò Model Comparison Summary")
    summary_df = pd.DataFrame(summary_data, columns=['Model', 'Œ≤(Log_GERD)', 'p-value', 'Adj. R¬≤'])
    st.dataframe(summary_df)

    fig_r2, ax_r2 = plt.subplots()
    sns.barplot(x='Model', y='Adj. R¬≤', data=summary_df, ax=ax_r2, palette="Blues_d")
    ax_r2.set_title("Adjusted R¬≤ Across Models")
    st.pyplot(fig_r2)

    with st.expander("üìÑ Full Regression Summaries"):
        for name, model in models.items():
            st.markdown(f"### {name}")
            st.text(model.summary())

except Exception as e:
    st.error(f"‚ùå Regression failed: {e}")